// <auto-generated />
using System;
using DatingApp.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220129104112_InitialCreate3")]
    partial class InitialCreate3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatingApp.API.Models.Allocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activity1")
                        .HasColumnType("bit");

                    b.Property<bool>("Activity2")
                        .HasColumnType("bit");

                    b.Property<bool>("Activity3")
                        .HasColumnType("bit");

                    b.Property<int>("BarnameId")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool?>("FinalAcceptance")
                        .HasColumnType("bit");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int?>("UsedUnit")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BarnameId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Allocations");
                });

            modelBuilder.Entity("DatingApp.API.Models.Barname", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaravordNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Barname");
                });

            modelBuilder.Entity("DatingApp.API.Models.BarnameGroup", b =>
                {
                    b.Property<int>("BarnameId")
                        .HasColumnType("int");

                    b.Property<int>("BasicDataId")
                        .HasColumnType("int");

                    b.HasKey("BarnameId", "BasicDataId");

                    b.HasIndex("BasicDataId");

                    b.ToTable("BarnameGroups");
                });

            modelBuilder.Entity("DatingApp.API.Models.BarnameNetwork", b =>
                {
                    b.Property<int>("BarnameId")
                        .HasColumnType("int");

                    b.Property<int>("BasicDataId")
                        .HasColumnType("int");

                    b.HasKey("BarnameId", "BasicDataId");

                    b.HasIndex("BasicDataId");

                    b.ToTable("BarnameNetworks");
                });

            modelBuilder.Entity("DatingApp.API.Models.BarnameProducer", b =>
                {
                    b.Property<int>("BarnameId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("BarnameId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("BarnameProducers");
                });

            modelBuilder.Entity("DatingApp.API.Models.Basic", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Basic");
                });

            modelBuilder.Entity("DatingApp.API.Models.BasicData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BasicDatas");
                });

            modelBuilder.Entity("DatingApp.API.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("DatingApp.API.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DatingApp.API.Models.EmployeeProject", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("DatingApp.API.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScreenplayId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScreenplayId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("DatingApp.API.Models.EpisodeConcept", b =>
                {
                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("PMDSPSItemItemID")
                        .HasColumnType("int");

                    b.HasKey("EpisodeId", "PMDSPSItemItemID");

                    b.HasIndex("PMDSPSItemItemID");

                    b.ToTable("EpisodeConcepts");
                });

            modelBuilder.Entity("DatingApp.API.Models.EpisodeWriter", b =>
                {
                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("EpisodeId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("EpisodeWriters");
                });

            modelBuilder.Entity("DatingApp.API.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DatingApp.API.Models.Occasion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Occasions");
                });

            modelBuilder.Entity("DatingApp.API.Models.OrgStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsInner")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrgId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrgStructures");
                });

            modelBuilder.Entity("DatingApp.API.Models.PMDSPSItem", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CleanTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EUserID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSys")
                        .HasColumnType("bit");

                    b.Property<string>("MyProperty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RUserID")
                        .HasColumnType("int");

                    b.Property<int?>("Sys_Title_FirstAscii")
                        .HasColumnType("int");

                    b.Property<int?>("Sys_Title_Lenght")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("ItemID");

                    b.ToTable("PMDSPSItem");
                });

            modelBuilder.Entity("DatingApp.API.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DatingApp.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("DatingApp.API.Models.ProcessDataReg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScreenplayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProcessDataRegs");
                });

            modelBuilder.Entity("DatingApp.API.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProjectDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("DatingApp.API.Models.RRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarnameId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OccasionId")
                        .HasColumnType("int");

                    b.Property<int?>("RecordTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BarnameId");

                    b.HasIndex("OccasionId");

                    b.HasIndex("RecordTypeId");

                    b.ToTable("RRequests");
                });

            modelBuilder.Entity("DatingApp.API.Models.RRequestResource", b =>
                {
                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("RRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ResourceId", "RRequestId");

                    b.HasIndex("RRequestId");

                    b.ToTable("RRequestResources");
                });

            modelBuilder.Entity("DatingApp.API.Models.RecordType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecordTypes");
                });

            modelBuilder.Entity("DatingApp.API.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BasicDataId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceId");

                    b.HasIndex("BasicDataId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("DatingApp.API.Models.ResourceOccasion", b =>
                {
                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("OccasionId")
                        .HasColumnType("int");

                    b.HasKey("ResourceId", "OccasionId");

                    b.HasIndex("OccasionId");

                    b.ToTable("ResourceOccasions");
                });

            modelBuilder.Entity("DatingApp.API.Models.Screenplay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaravordNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalNumberEpisodes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Screenplays");
                });

            modelBuilder.Entity("DatingApp.API.Models.ScreenplayFormat", b =>
                {
                    b.Property<int>("ScreenplayId")
                        .HasColumnType("int");

                    b.Property<int>("PMDSPSItemItemID")
                        .HasColumnType("int");

                    b.Property<int?>("BarnameId")
                        .HasColumnType("int");

                    b.HasKey("ScreenplayId", "PMDSPSItemItemID");

                    b.HasIndex("BarnameId");

                    b.HasIndex("PMDSPSItemItemID");

                    b.ToTable("ScreenplayFormats");
                });

            modelBuilder.Entity("DatingApp.API.Models.ScreenplayGenre", b =>
                {
                    b.Property<int>("ScreenplayId")
                        .HasColumnType("int");

                    b.Property<int>("PMDSPSItemItemID")
                        .HasColumnType("int");

                    b.HasKey("ScreenplayId", "PMDSPSItemItemID");

                    b.HasIndex("PMDSPSItemItemID");

                    b.ToTable("ScreenplayGenres");
                });

            modelBuilder.Entity("DatingApp.API.Models.ScreenplayOrgStructure", b =>
                {
                    b.Property<int>("ScreenplayId")
                        .HasColumnType("int");

                    b.Property<int>("PMDSPSItemItemID")
                        .HasColumnType("int");

                    b.HasKey("ScreenplayId", "PMDSPSItemItemID");

                    b.HasIndex("PMDSPSItemItemID");

                    b.ToTable("ScreenplayOrgStructures");
                });

            modelBuilder.Entity("DatingApp.API.Models.ScreenplayProducer", b =>
                {
                    b.Property<int>("ScreenplayId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("ScreenplayId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("ScreenplayProducers");
                });

            modelBuilder.Entity("DatingApp.API.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("DatingApp.API.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DatingApp.API.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("DatingApp.API.Models.TimeSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimeSections");
                });

            modelBuilder.Entity("DatingApp.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrgId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DatingApp.API.Models.UserTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTests");
                });

            modelBuilder.Entity("DatingApp.API.Models.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("DatingApp.API.Models.Allocation", b =>
                {
                    b.HasOne("DatingApp.API.Models.Barname", "Barname")
                        .WithMany()
                        .HasForeignKey("BarnameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barname");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("DatingApp.API.Models.Barname", b =>
                {
                    b.HasOne("DatingApp.API.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DatingApp.API.Models.BarnameGroup", b =>
                {
                    b.HasOne("DatingApp.API.Models.Barname", "Barname")
                        .WithMany("BarnameGroups")
                        .HasForeignKey("BarnameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.BasicData", "BasicData")
                        .WithMany()
                        .HasForeignKey("BasicDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barname");

                    b.Navigation("BasicData");
                });

            modelBuilder.Entity("DatingApp.API.Models.BarnameNetwork", b =>
                {
                    b.HasOne("DatingApp.API.Models.Barname", "Barname")
                        .WithMany("BarnameNetworks")
                        .HasForeignKey("BarnameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.BasicData", "BasicData")
                        .WithMany()
                        .HasForeignKey("BasicDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barname");

                    b.Navigation("BasicData");
                });

            modelBuilder.Entity("DatingApp.API.Models.BarnameProducer", b =>
                {
                    b.HasOne("DatingApp.API.Models.Barname", "Barname")
                        .WithMany("BarnameProducers")
                        .HasForeignKey("BarnameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Person", "Producer")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barname");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("DatingApp.API.Models.EmployeeProject", b =>
                {
                    b.HasOne("DatingApp.API.Models.Employee", "Employee")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Project", "Project")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DatingApp.API.Models.Episode", b =>
                {
                    b.HasOne("DatingApp.API.Models.Screenplay", "Screenplay")
                        .WithMany("Episodes")
                        .HasForeignKey("ScreenplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screenplay");
                });

            modelBuilder.Entity("DatingApp.API.Models.EpisodeConcept", b =>
                {
                    b.HasOne("DatingApp.API.Models.Episode", "Episode")
                        .WithMany("EpisodeConcepts")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.PMDSPSItem", "PMDSPSItem")
                        .WithMany()
                        .HasForeignKey("PMDSPSItemItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("PMDSPSItem");
                });

            modelBuilder.Entity("DatingApp.API.Models.EpisodeWriter", b =>
                {
                    b.HasOne("DatingApp.API.Models.Episode", "Episode")
                        .WithMany("EpisodeWriters")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Person", "Writer")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("DatingApp.API.Models.Photo", b =>
                {
                    b.HasOne("DatingApp.API.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingApp.API.Models.ProcessDataReg", b =>
                {
                    b.HasOne("DatingApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingApp.API.Models.RRequest", b =>
                {
                    b.HasOne("DatingApp.API.Models.Barname", "Barname")
                        .WithMany()
                        .HasForeignKey("BarnameId");

                    b.HasOne("DatingApp.API.Models.Occasion", "Occasion")
                        .WithMany()
                        .HasForeignKey("OccasionId");

                    b.HasOne("DatingApp.API.Models.RecordType", "RecordType")
                        .WithMany()
                        .HasForeignKey("RecordTypeId");

                    b.Navigation("Barname");

                    b.Navigation("Occasion");

                    b.Navigation("RecordType");
                });

            modelBuilder.Entity("DatingApp.API.Models.RRequestResource", b =>
                {
                    b.HasOne("DatingApp.API.Models.RRequest", "RRequest")
                        .WithMany("RRequestResources")
                        .HasForeignKey("RRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("RRequest");
                });

            modelBuilder.Entity("DatingApp.API.Models.Resource", b =>
                {
                    b.HasOne("DatingApp.API.Models.BasicData", "BasicData")
                        .WithMany()
                        .HasForeignKey("BasicDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicData");
                });

            modelBuilder.Entity("DatingApp.API.Models.ResourceOccasion", b =>
                {
                    b.HasOne("DatingApp.API.Models.Occasion", "Occasion")
                        .WithMany()
                        .HasForeignKey("OccasionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occasion");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("DatingApp.API.Models.Screenplay", b =>
                {
                    b.HasOne("DatingApp.API.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DatingApp.API.Models.ScreenplayFormat", b =>
                {
                    b.HasOne("DatingApp.API.Models.Barname", null)
                        .WithMany("ScreenplayFormats")
                        .HasForeignKey("BarnameId");

                    b.HasOne("DatingApp.API.Models.PMDSPSItem", "PMDSPSItem")
                        .WithMany()
                        .HasForeignKey("PMDSPSItemItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Screenplay", "Screenplay")
                        .WithMany("ScreenplayFormats")
                        .HasForeignKey("ScreenplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PMDSPSItem");

                    b.Navigation("Screenplay");
                });

            modelBuilder.Entity("DatingApp.API.Models.ScreenplayGenre", b =>
                {
                    b.HasOne("DatingApp.API.Models.PMDSPSItem", "PMDSPSItem")
                        .WithMany()
                        .HasForeignKey("PMDSPSItemItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Screenplay", "Screenplay")
                        .WithMany("ScreenplayGenres")
                        .HasForeignKey("ScreenplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PMDSPSItem");

                    b.Navigation("Screenplay");
                });

            modelBuilder.Entity("DatingApp.API.Models.ScreenplayOrgStructure", b =>
                {
                    b.HasOne("DatingApp.API.Models.PMDSPSItem", "PMDSPSItem")
                        .WithMany()
                        .HasForeignKey("PMDSPSItemItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Screenplay", "Screenplay")
                        .WithMany("screenplayOrgStructures")
                        .HasForeignKey("ScreenplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PMDSPSItem");

                    b.Navigation("Screenplay");
                });

            modelBuilder.Entity("DatingApp.API.Models.ScreenplayProducer", b =>
                {
                    b.HasOne("DatingApp.API.Models.Person", "Producer")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Screenplay", "Screenplay")
                        .WithMany("ScreenplayProducers")
                        .HasForeignKey("ScreenplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");

                    b.Navigation("Screenplay");
                });

            modelBuilder.Entity("DatingApp.API.Models.StudentCourse", b =>
                {
                    b.HasOne("DatingApp.API.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingApp.API.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DatingApp.API.Models.Barname", b =>
                {
                    b.Navigation("BarnameGroups");

                    b.Navigation("BarnameNetworks");

                    b.Navigation("BarnameProducers");

                    b.Navigation("ScreenplayFormats");
                });

            modelBuilder.Entity("DatingApp.API.Models.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("DatingApp.API.Models.Employee", b =>
                {
                    b.Navigation("EmployeeProject");
                });

            modelBuilder.Entity("DatingApp.API.Models.Episode", b =>
                {
                    b.Navigation("EpisodeConcepts");

                    b.Navigation("EpisodeWriters");
                });

            modelBuilder.Entity("DatingApp.API.Models.Project", b =>
                {
                    b.Navigation("EmployeeProject");
                });

            modelBuilder.Entity("DatingApp.API.Models.RRequest", b =>
                {
                    b.Navigation("RRequestResources");
                });

            modelBuilder.Entity("DatingApp.API.Models.Screenplay", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("ScreenplayFormats");

                    b.Navigation("ScreenplayGenres");

                    b.Navigation("screenplayOrgStructures");

                    b.Navigation("ScreenplayProducers");
                });

            modelBuilder.Entity("DatingApp.API.Models.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("DatingApp.API.Models.User", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
